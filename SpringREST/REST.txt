REST.txt

2000년대쯤 등장(스마트폰) 

REST (REpresentational State Transfer) / REST API
 -> 자원(데이터)을 이름으로 구분해서 
    자원의 상태를 주고 받는 형태 API
   => URL(주소)를 설계하는 방식  
   
   https://youtu.be/RP_f5dMoHFc?si=Mae8mDI54XPOwUNF
   
 * REST => 웹 아키텍처 스타일  / 제약조건 
   (RESTful 하다/아키텍처 )  
 
 1) Client-Server(클라이언트 서버구조)
  -> 클라이언트와 서버는 역할이 명확하게 분리되어야 한다.
     ( UI )        (데이터 처리)
  => 역할분리로 독립적인 개발 & 배포 진행   (관심사의 분리)
  
  
  2) Stateless (무상태성)
  -> 서버는 요청간에 클라이언트의 상태를 저장하지 않음 
    (클라이언트가 요청시 필요한 정보를 모두 포함해야함) 
  => 확장성을 증가, 서버의 리소스를 적게 사용
  
  
  3) Cacheable (캐시 처리 가능)
  -> 응답데이터는 캐시처리 가능여부를 명시해야함
     (클라이언트가 정보저장해서 재사용)
  => 성능향상 & 서버 부하 감소
  
  4) Uniform Interface (인터페이스의 일관성)
  -> REST방식으로 시스템의 자원에 접근할때 일관된 방식으로 접근해야함
  =>  자원의 식별은 URL으로 식별 (/itwill/1001)
      표현의 조작 : JSON,XML의 형태의 데이터를 표현  
      자기서술적 메세지: 메세지(응답정보)에 필요한 정보를 포함해야함(Content-Type)
      
  5) Layered System (계층화된 시스템)
  -> 클라이언트는 자신이 직접 연결된 서버외 중간서버에 연결불가(프록시,게이트웨이)
  => 보안 증가, 캐시, 로드밸런싱 기능 향상
  
  6) Code on Demand (선택적 제약조건)
  -> 서버는 클라이언트의 실행에 영향을 주는 코드를 전송가능(JS)
    ( 클라이언트의 기능을 동적으로 처리 )
  => REST API에서는 사용X   
  
  
  * REST API(WEB API/HTTP API) 사용 규칙
  
  1) URL에서는 동사 사용X, 명사 사용O
     /getStudent?stdid=10001  (x)
     /students/10001		  (o)
     
       
  * Document vs Collection
   => 주소에 표현되는 리소스
   
   - Document : 문서 (객체)  / 단수로 표현
   - Collection : 문서의 집합 (객체의 집합) / 복수로 표현
     
     
  2) 동사의 표현은 HTTP메서드로 사용   
     GET : 조회
     POST : 추가
     PUT / PATCH : 수정 / 부분수정
     DELETE : 삭제
  
  3) 계층관계를 표현하기 위해서 /(슬래시)를 사용
    (단, URL의 마지막문자로 / 사용불가)
    
     http://localhost:8088/students/10001  (O)
     http://localhost:8088/students/10001/  (X)
 
  4) 주소표현시 _(밑줄)는 사용불가, -(하이픈)을 사용
     http://localhost:8088/students_itwill/10001/  (X)
     http://localhost:8088/students-itwill/10001/  (O)
     
  5) URL을 작성할때는 소문자로만 작성      
  
  6) 주소줄에 파일의 확장자표시 X
     http://localhost:8088/students-itwill/10001/img.png  (X)
     http://localhost:8088/students-itwill/10001/img  (O)
     (+해더정보 추가)
  

  * 스프링에서의 REST방식 개발
   @ResponseBody  => REST방식 개발가능 (스프링 3버전)
   @RestController => REST방식 개발가능 (스프링 4버전)

   	  
  
  
  * ResponseEntity : HTTP 응답 정보를 제어하는 객체
   =>	응답결과(JSON), HTTP 상태코드, 헤더, 바디 처리가능
   
   * HTTP 상태코드
   
   100번대 : 현재 데이터의 처리중 상태
     -100 : 상태가 좋으며, 클라이언트가 계속해서 요처하는상태
     
   200번대 : 정상적인 응답상태
   	 -200 : 에러코드 없이 정상처리상태
   	 -201 : 요청이 성공적인 처리, POST/PUT 방식에 따른 상태
   	 -204 : 정상 처리가 되었으나, 서버에서 보내줄 데이터가 없음
   	 
   300번대 : 다른 URL 처리상태 (리다이렉트)
     -301 : 요청한 페이지가 새로운 URL로 변경됨
     -304 : 이미 기존의 데이터와 변경된 내용이 없음
   	 
  
   400번대 : 서버에서 인식이 불가능한 경우(클라이언트 오류)
     -400 : 전송된 요청에 문제가 생겨서 서버에서 인식불가(문법 오류)
     -403 : 서버에서 허락되지 않음(접근 권한이 없음)
     -404 : 페이지 찾을수 없음(URL에 해당하는 리소스를 찾을수 없음)
	 -405 : 전송방식에 문제가 이을때(REST)
	 
   500번대 : 서버 내부의 문제
     -500 : 서버에서 처리시 문제가 발생
     -502 : 게이트웨이나 프록시상태가 문제발생 (과부화)
     -503 : 일시적 과부화로 서비스를 중단 상태
     -504 : 지정된 처리시간이 지나서 처리가 불가능한 상태
  
  
   
   
   
   
   
   