시큐리티.txt

Spring Web Security : 스프링이 제공하는 보안적요소의 기능
 => 필터와 인터셉터를 사용하여 처리
 
  필터 : 특정 객체(서블릿&컨트롤러)에 접근해서 관여
  		 => 서블릿의 자원을 사용		
  		 
  인터셉터 :  특정 객체(서블릿&컨트롤러)에 접근해서 관여
  		=> 스프링의 빈으로 관리되는 객체들을 사용
  		  (Spring Context에 포함)
  		   스프링의 자원을 추가적 사용 가능

 p607
  
  [Servlet Context]----------------------------------------
  
   (Filter 1)		[Spring Context] ----------------------
   (Filter 2)		
   (Filter...)		 (intercepter)                 /[root-context.xml]
   (Filter...)		 (intercepter)  [SecurityContext]            
   (Filter...)		 (intercepter)				   \[servlet-context.xml] 
   (Filter...)
   (Filter n)       ---------------------------------------
  
  ---------------------------------------------------------
 
 
 * 스프링 시큐리티에 필요한 라이브러리 

 spring-security-web
 spring-security-core
 spring-security-config
  => 반드시 동일한 버전을 사용해야함!! 
    (스프링의 버전과 동일하게 체크) 
   
 spring-security-taglibs
 
 
 * 인증(Authentication) : 자기 자신을 증명하는것.
  즉, 다른 사람에게 나를 증명할만한 무엇인가를 제시하는것(신분증)
 
 
 * 인가/권한 부여(Authorization) : 남이 나에게 부여해주는 자격
 
 
 
<security:intercept-url 
			pattern="/sample/all" 
 			access="permitAll"/>
 
 pattern ="인터셉터할 주소"
 access ="접근 권한체크" 	permitAll(모두 허용)
 							hasRole('ROLE_MEMBER') (특정 권한이 있는지 체크)
<security:intercept-url 
			pattern="/sample/member" 
 			access="hasRole('ROLE_MEMBER')"/>
 
 
 * username 키워드 : 스프링 시큐리티에서는 userid정보를 저장
 
   일반적인 id => username
   일반적인 name => username 아닌 형태로 저장
   
 * User 키워드 : 스프링 시큐리티에서는 인증정보와 권한을 가진 객체를 의미  
               즉, 일반적인 회원정보저장 불가
 
 
 * CSRF(Cross-Site Request Forgery)
   => 사이트간 위조 방지를 사용한 공격
   
 - 특정 웹사이트에 대해서 사용자가 인지하지 못한 상황에서
   사용자의 의도와는 무관하게 공격자가 의도한 행위(수정,삭제,등록등..)
   을 요청하게 하는 공격 (토큰 탈취) 
   
 - 게시판 글정보 보기/ 이미지태그에서 해당 코드를 심을수 있음   
   
   => POST방식을 통한 정보 전달을 수행할때 CSRF Token 사용!
    (스프링 시큐리티 적용시)
    
     
 
 https://github.com/spring-projects/spring-security/blob/main/core/src/main/java/org/springframework/security/provisioning/JdbcUserDetailsManager.java
 
 
 
 public static final String DEF_CREATE_USER_SQL
  = "insert into users (username, password, enabled) values (?,?,?)";
 
 * users 테이블 생성
  
  	create table users(
  		username varchar(50) not null primary key,
  		password varchar(50) not null,
  		enabled varchar(1) default '1'  	
  	);
 
public static final String DEF_INSERT_AUTHORITY_SQL 
= "insert into authorities (username, authority) values (?,?)";
 
 * authorities 테이블 생성
 
 create table authorities(
 	username varchar(50) not null,
 	authority varchar(50) not null,
 	
 	constraint fk_authorities_users foreign key(username) references users(username)
 	
 );
 
 
 insert into users (username,password) values('user00','pw00');
 insert into users (username,password) values('member00','pw00');
 insert into users (username,password) values('admin00','pw00');
 
 insert into authorities (username,authority) 
  values('user00','ROLE_USER');
 insert into authorities (username,authority) 
  values('member00','ROLE_MEMBER');
 insert into authorities (username,authority) 
  values('admin00','ROLE_MEMBER');
 insert into authorities (username,authority) 
  values('admin00','ROLE_ADMIN');
 
 
 
 
 
 
 
 
 
 
  		   
  
